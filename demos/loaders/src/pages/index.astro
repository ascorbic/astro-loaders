---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";

const releases = await getCollection("releases");
const episodes = await getCollection("podcasts");
const customers = await getCollection("customers");
const spacecraft = await getCollection("spacecraft");

// en-CA formats as yyyy-mm-dd
const formatter = new Intl.DateTimeFormat("en-CA", {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
});
---

<Layout title="Releases">
  <h2>Live Collections</h2>
  <ul>
    <li><a href="/news">BBC Science & Environment News (Live Feed Demo)</a></li>
    <li><a href="/live-bluesky">Live Bluesky Posts (Real-time)</a></li>
  </ul>
  
  <h2>Build-time Collections</h2>
  <ul>
    <li><a href="/bluesky">Bluesky Posts (Build-time)</a></li>
  </ul>
  
  <h2>YouTube Loader Demos</h2>
  <ul>
    <li><a href="/youtube">YouTube Videos by ID</a> - Load specific videos using their YouTube IDs</li>
    <li><a href="/youtube-channel">Channel Videos (Latest)</a> - Load latest videos from FreeCodeCamp channel</li>
    <li><a href="/youtube-popular">Channel Videos (Most Popular)</a> - Load most popular videos from FreeCodeCamp channel</li>
    <li><a href="/youtube-search">Search Results</a> - Search for "Astro web framework" videos</li>
    <li><a href="/youtube-recent">Recent JavaScript Tutorials</a> - Search with date filtering (2024+)</li>
  </ul>
  
  <h2>Spacecraft</h2>
  {
    spacecraft.map(({ data }) => (
      <div>
        <h3>{data["Launch Name"]}</h3>
        <p>{data["Launch date"]?.toDateString()}</p>
        <p>{data.Status}</p>
        <p>{data.Description}</p>
      </div>
    ))
  }
  <h2>Releases</h2>
  <ul>
    {
      releases.map((release) => (
        <li>
          <a
            href={`/releases/${release.data.title?.replace(/\W/g, "-").toLowerCase()}`}
          >
            {release.data.title}
          </a>
        </li>
      ))
    }
  </ul>
  <h2>Episodes</h2>
  <ul>
    {
      episodes.map((episode) => (
        <li>
          <a href={`/episodes/${formatter.format(episode.data.published!)}`}>
            {episode.data.title}
          </a>
        </li>
      ))
    }
  </ul>
  <h2>Customers</h2>
  <table>
    <thead>
      <tr>
        {Object.keys(customers?.[0]?.data ?? {}).map((key) => <th>{key}</th>)}
        <th></th>
      </tr>
    </thead>
    {
      customers.map((customer) => (
        <tr>
          {Object.values(customer.data).map((value) => (
            <td>{value}</td>
          ))}
          <td>
            <a href={`/customers/${customer.id}`}>View</a>
          </td>
        </tr>
      ))
    }
  </table>
</Layout>
