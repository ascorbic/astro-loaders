---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";


const videos = await getCollection("channelVideos");
---

<Layout title="FreeCodeCamp Channel Videos - Build-time Collection">
  <h1>FreeCodeCamp Channel Videos (Build-time Collection)</h1>
  <p>This page demonstrates loading videos from a specific YouTube channel using the build-time loader.</p>
  <p><strong>Channel:</strong> FreeCodeCamp (UCrUL8K81R4VBzm-KOYwrcxQ)</p>
  <p><strong>Videos loaded:</strong> {videos.length} (latest 20, ordered by date)</p>
  
  <div class="video-grid">
    {videos.map((video) => (
      <div class="video-card">
        <iframe 
          width="560" 
          height="315" 
          src={`https://www.youtube.com/embed/${video.data.id}`} 
          title={video.data.title} 
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen
        ></iframe>
        
        <div class="video-info">
          <h3><a href={video.data.url} target="_blank" rel="noopener noreferrer">{video.data.title}</a></h3>
          <p class="channel">{video.data.channelTitle}</p>
          <div class="metadata">
            <span class="views">{video.data.viewCount ? `${video.data.viewCount.toLocaleString()} views` : 'N/A views'}</span>
            <span class="date">Published {new Date(video.data.publishedAt).toLocaleDateString()}</span>
          </div>
          {video.data.tags && video.data.tags.length > 0 && (
            <div class="tags">
              {video.data.tags.slice(0, 3).map((tag: string) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>
  
  <style>
    .video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }
    
    .video-card {
      border: 1px solid #e1e5e9;
      border-radius: 8px;
      overflow: hidden;
      background: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .video-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .thumbnail {
      position: relative;
      aspect-ratio: 16/9;
      overflow: hidden;
    }
    
    .thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .duration {
      position: absolute;
      bottom: 8px;
      right: 8px;
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .video-info {
      padding: 1rem;
    }
    
    .video-info h3 {
      margin: 0 0 0.5rem 0;
      font-size: 1rem;
      line-height: 1.4;
    }
    
    .video-info h3 a {
      color: inherit;
      text-decoration: none;
    }
    
    .video-info h3 a:hover {
      color: #2563eb;
    }
    
    .channel {
      color: #6b7280;
      font-size: 0.875rem;
      margin: 0 0 0.5rem 0;
    }
    
    .metadata {
      display: flex;
      gap: 1rem;
      font-size: 0.875rem;
      color: #6b7280;
      margin-bottom: 0.5rem;
    }
    
    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
    }
    
    .tag {
      background: #f3f4f6;
      color: #374151;
      padding: 0.125rem 0.375rem;
      border-radius: 3px;
      font-size: 0.625rem;
    }
  </style>
</Layout>